/*
 * Copyright (c) 2023. Simone Baffelli
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package ch.empa.openbisio

import ch.ethz.sis.openbis.generic.asapi.v3.dto.experiment.fetchoptions.ExperimentFetchOptions
import ch.ethz.sis.openbis.generic.asapi.v3.dto.project.fetchoptions.ProjectFetchOptions
import ch.ethz.sis.openbis.generic.asapi.v3.dto.property.fetchoptions.PropertyAssignmentFetchOptions
import ch.ethz.sis.openbis.generic.asapi.v3.dto.property.fetchoptions.PropertyTypeFetchOptions
import ch.ethz.sis.openbis.generic.asapi.v3.dto.property.search.PropertyTypeSearchCriteria
import ch.ethz.sis.openbis.generic.asapi.v3.dto.sample.fetchoptions.SampleFetchOptions
import ch.ethz.sis.openbis.generic.asapi.v3.dto.sample.fetchoptions.SampleTypeFetchOptions
import ch.ethz.sis.openbis.generic.asapi.v3.dto.sample.search.SampleTypeSearchCriteria
import ch.ethz.sis.openbis.generic.asapi.v3.dto.space.fetchoptions.SpaceFetchOptions
import ch.ethz.sis.openbis.generic.asapi.v3.dto.space.search.SpaceSearchCriteria
import jakarta.mail.internet.InternetAddress
import kotlinx.cli.ArgParser
import kotlinx.cli.ArgType
import kotlinx.serialization.KSerializer
import kotlinx.serialization.decodeFromString
import kotlinx.serialization.descriptors.PrimitiveKind
import kotlinx.serialization.descriptors.PrimitiveSerialDescriptor
import kotlinx.serialization.descriptors.SerialDescriptor
import kotlinx.serialization.encodeToString
import kotlinx.serialization.encoding.Decoder
import kotlinx.serialization.encoding.Encoder
import kotlinx.serialization.json.Json
import ch.empa.openbisio.instance.Instance
import ch.empa.openbisio.openbis.OpenBISService
import java.io.File
import java.net.URL

object InternetAddressAsStringSerializer : KSerializer<InternetAddress> {
    override val descriptor: SerialDescriptor =
        PrimitiveSerialDescriptor("InternetAddress", PrimitiveKind.STRING)

    override fun serialize(encoder: Encoder, value: InternetAddress) {
        val string = value.toString()
        encoder.encodeString(string)
    }

    override fun deserialize(decoder: Decoder): InternetAddress {
        val string = decoder.decodeString()
        return InternetAddress(string)
    }
}


fun sampleFetchConfig(): SampleFetchOptions {
    val sfo = SampleFetchOptions()
    sfo.withType().withPropertyAssignmentsUsing(assignmentFetchOptions())
    sfo.withProperties()
    sfo.withRegistrator()
    return sfo
}

fun assignmentFetchOptions(): PropertyAssignmentFetchOptions {
    val pfo = PropertyAssignmentFetchOptions().apply {
        this.withRegistrator()
        this.withPropertyType()
    }
    return pfo
}

fun collectionFetchConfig(): ExperimentFetchOptions {
    val efo = ExperimentFetchOptions()
    efo.withType().withPropertyAssignmentsUsing(assignmentFetchOptions())
    efo.withProperties()
    efo.withRegistrator()

    efo.withSamplesUsing(sampleFetchConfig())
    return efo
}

fun projectFetchConfig(): ProjectFetchOptions {
    val pfo = ProjectFetchOptions()
    pfo.withLeader()
    pfo.withRegistrator()
    pfo.withExperimentsUsing(collectionFetchConfig())
    pfo.withSamplesUsing(sampleFetchConfig())
    return pfo
}

fun spaceFecthConfig(): SpaceFetchOptions {
    val sfo = SpaceFetchOptions()
    sfo.withProjectsUsing(projectFetchConfig())
    sfo.withSamplesUsing(sampleFetchConfig())
    sfo.withRegistrator()
    return sfo
}

fun sampleTypeFetchConfig(): SampleTypeFetchOptions {
    val stfo = SampleTypeFetchOptions().apply {
        this.withPropertyAssignmentsUsing(assignmentFetchOptions())
    }
    return stfo
}


enum class Mode {
    dump,
    load
}

fun dumpInstance(service: OpenBISService): Instance {
    val spaceSearchCriteria = SpaceSearchCriteria().withAndOperator()
    val spaceFetchConf = spaceFecthConfig()
    val spaces = service.con.searchSpaces(service.token, spaceSearchCriteria, spaceFetchConf).objects
    // Get property types
    val propertyTypeSearchCriteria = PropertyTypeSearchCriteria().withAndOperator()
    val propertyTypeFecthOptions = PropertyTypeFetchOptions()
    propertyTypeFecthOptions.withRegistrator()
    val props = service.con.searchPropertyTypes(service.token, propertyTypeSearchCriteria, propertyTypeFecthOptions).objects
    // Get object types
    val sampleTypeSearchCriteria = SampleTypeSearchCriteria().withAndOperator()
    val sampleTypeFetchOptions = sampleTypeFetchConfig()
    val sampleTypes = service.con.searchSampleTypes(service.token, sampleTypeSearchCriteria, sampleTypeFetchOptions).objects

    val spRep = Instance(spaces, props, sampleTypes).apply(Instance::updateCodes)
    return spRep
}

fun readInstance(config: String): Instance {
    return Json.decodeFromString<Instance>(config)
}


fun main(args: Array<String>) {
    val parser = ArgParser("example")
    val openbisURL by (parser.argument(ArgType.String))
    val username by parser.argument(ArgType.String)
    val password by parser.argument(ArgType.String)
    val mode by parser.argument(ArgType.Choice<Mode>())
    val ioFile by parser.option(ArgType.String)
    parser.parse(args)
    val service = OpenBISService(URL(openbisURL))
    val token = service.connect(username, password)
    val configFile = File(ioFile ?: "./test.json")
    when (mode) {
        Mode.dump -> {
            val inst = dumpInstance(service)
            val format = Json { prettyPrint = true }
            val res=   format.encodeToString(inst)
            configFile.writeText(res)
        }
        Mode.load -> {
            val instance = readInstance(configFile.readText()).create(service)
        }
    }

}

