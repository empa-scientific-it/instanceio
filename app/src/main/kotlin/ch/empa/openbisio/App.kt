/*
 * Copyright 2023 Simone Baffelli
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package ch.empa.openbisio

import ch.empa.openbisio.instance.InstanceDTO
import ch.empa.openbisio.instance.InstanceDeserializer
import ch.empa.openbisio.instance.InstanceMapper
import ch.empa.openbisio.instance.InstanceSerializer
import ch.ethz.sis.openbis.generic.OpenBIS
import kotlinx.cli.ArgParser
import kotlinx.cli.ArgType
import kotlinx.cli.Subcommand
import kotlinx.serialization.json.Json
import kotlinx.serialization.json.decodeFromStream
import java.io.File


@kotlinx.serialization.ExperimentalSerializationApi
@OptIn(kotlinx.cli.ExperimentalCli::class)
fun main(args: Array<String>) {


    val format = Json { prettyPrint = true }

    abstract class Common(name: String, description: String) : Subcommand(name, description) {
        val openbisURL by argument(ArgType.String)
        val username by argument(ArgType.String)
        val password by argument(ArgType.String)
        val ioFile by argument(ArgType.String)
    }

    class Dump : Common("dump", "Dump the instance to a file") {

        override fun execute() {
            val configFile = File(ioFile)
            val service = OpenBIS(openbisURL, 60000)
            service.login(username, password)
            val inst = InstanceDeserializer().dumpInstance(service)
            val res = format.encodeToString(InstanceDTO.serializer(), inst)
            configFile.writeText(res)
        }

    }

    class Load : Common("load", "Load the instance from a file") {

        override fun execute() {
            val configFile = File(ioFile)
            val service = OpenBIS(openbisURL, 60000)
            service.login(username, password)
            val serialiser = InstanceSerializer(service)
            val inst = Json.decodeFromStream(InstanceDTO.serializer(), configFile.inputStream())
            serialiser.persist(InstanceMapper(inst).mapToEntity())
        }
    }

    val parser = ArgParser("example")

    val summary = Dump()
    val multiple = Load()
    parser.subcommands(summary, multiple)
    parser.parse(args)

}

