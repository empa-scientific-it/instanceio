/*
 * Copyright 2023 Simone Baffelli
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

package ch.empa.openbisio.mappers

import ch.empa.openbisio.collection.CollectionDTO
import ch.empa.openbisio.collectiontype.CollectionTypeDTO
import ch.empa.openbisio.datasettype.DataSetTypeDTO
import ch.empa.openbisio.`object`.ObjectDTO
import ch.empa.openbisio.objectype.ObjectTypeDTO
import ch.empa.openbisio.project.ProjectDTO
import ch.empa.openbisio.propertyassignment.PropertyAssignmentDTO
import ch.empa.openbisio.propertytype.PropertyTypeDTO
import ch.empa.openbisio.space.SpaceDTO
import ch.empa.openbisio.vocabulary.VocabularyDTO
import ch.empa.openbisio.vocabulary.VocabularyTermDTO
import ch.ethz.sis.openbis.generic.asapi.v3.dto.dataset.DataSetType
import ch.ethz.sis.openbis.generic.asapi.v3.dto.experiment.Experiment
import ch.ethz.sis.openbis.generic.asapi.v3.dto.experiment.ExperimentType
import ch.ethz.sis.openbis.generic.asapi.v3.dto.project.Project
import ch.ethz.sis.openbis.generic.asapi.v3.dto.property.PropertyAssignment
import ch.ethz.sis.openbis.generic.asapi.v3.dto.property.PropertyType
import ch.ethz.sis.openbis.generic.asapi.v3.dto.sample.Sample
import ch.ethz.sis.openbis.generic.asapi.v3.dto.sample.SampleType
import ch.ethz.sis.openbis.generic.asapi.v3.dto.space.Space
import ch.ethz.sis.openbis.generic.asapi.v3.dto.vocabulary.Vocabulary
import ch.ethz.sis.openbis.generic.asapi.v3.dto.vocabulary.VocabularyTerm
import org.mapstruct.Mapper
import org.mapstruct.Mapping
import org.mapstruct.ValueMapping


@Mapper
interface OpenbisToDtoMapper {

    fun spaceListToSpaceDTOList(spaces: List<Space>): List<SpaceDTO>

    @Mapping(target = "description", source = "description", defaultValue = "")
    fun spaceToSpaceDTO(space: Space): SpaceDTO

    @Mapping(target = "collections", source = "experiments")
    @Mapping(target = "description", source = "description", defaultValue = "")
    fun projectToProjectDTO(project: Project): ProjectDTO

    @Mapping(target = "type", source = "type.code")
    @Mapping(target = "objects", source = "samples")
    fun experimentToCollectionDTO(experiment: Experiment): CollectionDTO

    @Mapping(target = "type", source = "type.code")
    @Mapping(target = "children", source = "children")
    @Mapping(target = "parents", source = "parents")
    fun sampleToObjectDTO(sample: Sample): ObjectDTO

    @Mapping(target = ".", source = "code")
    fun sampleToString(sample: Sample): String

    @Mapping(target = "description", source = "description", defaultValue = "")
    fun vocabularyToVocabularyDTO(vocabulary: Vocabulary): VocabularyDTO

    fun vocabularyListToVocabularyDTOList(vocabularies: List<Vocabulary>): List<VocabularyDTO>

    @Mapping(target = "description", source = "description", defaultValue = "")
    @Mapping(target = "label", source = "label", defaultValue = "")

    fun vocabularyTermToVocabularyTermDTO(term: VocabularyTerm): VocabularyTermDTO

    @Mapping(target = "autoGeneratedCode", source = "autoGeneratedCode", defaultValue = "false")
    fun sampleTypeToObjectTypeDTO(sampleType: SampleType): ObjectTypeDTO
    fun sampleTypeListToObjectTypeDTOList(sampleTypes: List<SampleType>): List<ObjectTypeDTO>


    fun experimentTypeToCollectionTypeDTO(experimentType: ExperimentType): CollectionTypeDTO
    fun experimentTypeListToCollectionTypeDTOList(experimentTypes: List<ExperimentType>): List<CollectionTypeDTO>

    @Mapping(target = "propertyTypeCode", source = "propertyType.code", defaultValue = "")
    fun propertyAssignmentToPropertyAssignmentDTO(propertyAssignment: PropertyAssignment): PropertyAssignmentDTO


    @ValueMapping(target = "OBJECT", source = "SAMPLE")
    @ValueMapping(target = "OBJECT", source = "MATERIAL")
    fun dataTypeToDataTypeDTO(dataType: ch.ethz.sis.openbis.generic.asapi.v3.dto.property.DataType): ch.empa.openbisio.datatype.DataTypeDTO

    @Mapping(target = "vocabularyId", source = "vocabulary.code", defaultValue = "")
    fun propertyTypeToPropertyTypeDTO(propertyType: PropertyType): PropertyTypeDTO
    fun propertyTypeListToPropertyTypeDTOList(propertyTypes: List<PropertyType>): List<PropertyTypeDTO>

    fun dataSetTypeToDataSetTypeDTO(dataSetType: DataSetType): DataSetTypeDTO

    fun dataSetTypeListToDataSetTypeDTOList(dataSetTypes: List<DataSetType>): List<DataSetTypeDTO>


}